#+TITLE: AIM Emacs Configuration
#+AUTHOR: Azhar Ibn Mostafiz
#+STARTUP: fold
#+OPTIONS: toc:2

* TABLE OF CONTENT                                                      :toc:
- [[#initialization-and-setup][Initialization and Setup]]
- [[#evil][Evil]]
- [[#basic-configuration][Basic Configuration]]
- [[#user-interface-and-appearance][User Interface and Appearance]]
- [[#themes-and-fonts][Themes and Fonts]]
- [[#keybindings][Keybindings]]
- [[#dictionary][Dictionary]]
- [[#search][Search]]
- [[#shell][Shell]]
- [[#org][Org]]
- [[#org-roam][Org Roam]]
- [[#projectile][Projectile]]
- [[#lsp-and-programming][LSP and Programming]]
  - [[#treesit][Treesit]]
  - [[#eglot][Eglot]]
  - [[#code-block-formatting][Code Block Formatting]]
  - [[#completion-framework][Completion Framework]]
  - [[#minibuffer-completion][Minibuffer Completion]]
  - [[#search-and-navigation][Search and Navigation]]
  - [[#context-sensitive-actions-and-annotations][Context-sensitive actions and annotations]]
  - [[#syntax-checking][Syntax checking]]
  - [[#prettier][Prettier]]
  - [[#web-mode][Web mode]]
  - [[#python][Python]]
  - [[#elixir][Elixir]]
  - [[#dart][Dart]]
  - [[#js][JS]]
  - [[#php][PHP]]
  - [[#po][PO]]
- [[#code-format][Code Format]]
- [[#latex][LaTex]]
- [[#pdf][Pdf]]
- [[#hydra][Hydra]]
- [[#magit][Magit]]
- [[#dashboard][Dashboard]]
- [[#rest][Rest]]
- [[#popper][Popper]]
- [[#auth-source-pass][Auth source pass]]
- [[#email][Email]]
  - [[#mu4e][mu4e]]
  - [[#gnus][Gnus]]

* Initialization and Setup
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

* Evil

#+begin_src emacs-lisp
  ;; Initialize Evil mode
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-undo-system 'undo-tree) ;; Set before loading Evil
    :config
    (evil-mode 1))

  ;; Configure Evil Collection
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode))

  (use-package evil-mc
    :after evil
    :config
    ;; Enable evil-mc globally
    (global-evil-mc-mode 1)
    )
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader ",")
    (evil-leader/set-key-for-mode 'org-mode
  				"a" 'org-agenda
  				"c" 'org-capture
  				"t" 'org-todo))

  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode))

  (use-package evil-visualstar
    :ensure t
    :config
    (global-evil-visualstar-mode))


#+end_src

* Basic Configuration
#+begin_src emacs-lisp
  (use-package emacs
    :init
    ;; Set backup and autosave directories
    (setq backup-directory-alist `(("." . "~/.config/emacs/tmp/backups"))
          auto-save-file-name-transforms `((".*" "~/.config/emacs/tmp/auto-save/" t))
          create-lockfiles nil)

    :config
    ;; Ensure temporary directories exist
    (mapc (lambda (dir)
            (unless (file-exists-p dir)
              (make-directory dir t)))
          '("~/.config/emacs/tmp/backups"
            "~/.config/emacs/tmp/auto-save"
            "~/.config/emacs/tmp/undo-tree"))

    ;; Display enhancements
    (setq display-line-numbers-type t)
    (global-display-line-numbers-mode 1)
    (global-visual-line-mode 1)
    (global-hl-line-mode 1)

    ;; Disable line numbers in selected modes
    (dolist (hook '(org-mode-hook eshell-mode-hook term-mode-hook))
      (add-hook hook (lambda () (display-line-numbers-mode 0)))))

  (use-package exec-path-from-shell
    
    :config
    (exec-path-from-shell-initialize))

  ;; Auto-revert even if the buffer was edited
  (setq revert-without-query '(".*"))
  ;; Automatically revert buffers when files change on disk
  (global-auto-revert-mode 1)

  ;; Also revert non-file buffers like dired
  (setq global-auto-revert-non-file-buffers t)

  ;; Be quiet about it (no message in minibuffer)
  (setq auto-revert-verbose nil)
#+end_src

* User Interface and Appearance
#+begin_src emacs-lisp
  ;; Core UI Configuration
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)

  ;;(straight-use-package 'all-the-icons)
  (use-package all-the-icons)

  ;; (straight-use-package 'rainbow-delimiters)
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;;(straight-use-package 'highlight-indent-guides)
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character))
#+end_src

* Themes and Fonts
#+begin_src emacs-lisp
  ;; (straight-use-package 'doom-themes)
  (use-package doom-themes
    :config
    (load-theme 'doom-gruvbox t))


  (set-face-attribute 'default nil :font "Source Code Pro" :height 150)
#+end_src

* Keybindings
#+begin_src emacs-lisp
  ;; Core Keybindings Configuration

  (use-package general
    :config
    ;; Create a leader key definer with SPC as the prefix in Evil modes
    (general-create-definer my-leader-def
      :states '(normal visual motion)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))

  ;; File-related operations under 'f'
  (my-leader-def
    "f"  '(:ignore t :which-key "file")
    "f s" 'save-buffer
    "f S" 'save-some-buffers
    "f f" 'find-file
    "f r" 'recentf-open-files
    "f d" 'dired
    "f n" 'make-frame-command
    "f o" 'find-file-other-window)

  ;; Buffer-related operations under 'b'
  (my-leader-def
    "b"  '(:ignore t :which-key "buffer")
    "b b" 'switch-to-buffer
    "b k" 'kill-buffer
    "b K" 'kill-buffer-and-window
    "b n" 'next-buffer
    "b p" 'previous-buffer
    "b d" 'display-buffer
    "b r" 'rename-buffer
    "b l" 'list-buffers
    "b m" 'switch-to-buffer)

  ;; Window management under 'w'
  (my-leader-def
    "w"  '(:ignore t :which-key "window")
    "w k" 'windmove-up
    "w j" 'windmove-down
    "w h" 'windmove-left
    "w l" 'windmove-right
    "w s" 'split-window-below
    "w v" 'split-window-right
    "w w" 'other-window
    "w d" 'delete-window
    "w =" 'balance-windows
    "w m" 'delete-other-windows
    "w x" 'winner-undo
    "w X" 'winner-redo)

  ;; Search commands under 's'
  (my-leader-def
    "s"  '(:ignore t :which-key "search")
    "s f" 'swiper
    "s r" 'replace-string
    "s p" 'projectile-ag
    "s b" 'consult-buffer
    "s t" 'consult-theme)

  ;; Eglot commands under 'e'
  (with-eval-after-load 'eglot
    (my-leader-def
      :keymaps 'eglot-mode-map
      "e"  '(:ignore t :which-key "eglot")
      "ea" 'eglot-code-actions
      "ef" 'eglot-format
      "er" 'eglot-rename
      "ed" 'eldoc-doc-buffer
      "eh" 'eglot-help-at-point))

  ;; Org mode bindings
  (my-leader-def
    "o"  '(:ignore t :which-key "Org")
    "o a" 'org-agenda
    "o c" 'org-capture
    "o l" 'org-store-link
    "o t" 'org-todo
    "o s" 'org-schedule
    "o d" 'org-deadline
    "o P" 'org-paste-subtree)

  (my-leader-def
    "t"   '(:ignore t :which-key "toggles")
    "t v" '(vterm :which-key "vterm")
    "t p" '(popper-toggle :which-key "toggle popup")
    "t P" '(popper-cycle :which-key "cycle popup")
    "t T" '(popper-toggle-type :which-key "toggle popup type"))

  (my-leader-def
    :infix "n" ;; for notes
    ""  '(:ignore t :which-key "notes")
    "n" '(org-roam-node-find :which-key "find node")
    "i" '(org-roam-node-insert :which-key "insert node")
    "c" '(org-roam-capture :which-key "capture")
    "l" '(org-roam-buffer-toggle :which-key "toggle roam buffer")
    "t" '(org-roam-tag-add :which-key "add tag")
    "a" '(org-roam-alias-add :which-key "add alias")
    ;; Dailies
    "d" '(:ignore t :which-key "dailies")
    "dt" '(org-roam-dailies-goto-today :which-key "today")
    "dy" '(org-roam-dailies-goto-yesterday :which-key "yesterday")
    "dd" '(org-roam-dailies-goto-date :which-key "pick date")
    "dc" '(org-roam-dailies-capture-today :which-key "capture today"))

  ;;   (with-eval-after-load 'org
  ;;     (general-define-key
  ;;      :keymaps 'org-mode-map
  ;;      "C-<return>" #'org-smart-insert-heading
  ;;      "C-M-<return>" #'org-smart-insert-subheading))
  ;; (defun org-smart-insert-heading ()
  ;;   "Insert a new same-level heading after current subtree or list item."
  ;;   (interactive)
  ;;   (cond
  ;;    ;; Inside list item
  ;;    ((org-in-item-p)
  ;;     (end-of-line)
  ;;     (org-insert-item))

  ;;    ;; Inside heading
  ;;    ((org-at-heading-p)
  ;;     (save-excursion
  ;;       (org-end-of-subtree t t)          ; move to end of subtree
  ;;       (skip-chars-forward " \t\n")      ; skip whitespace/newlines
  ;;       (unless (eobp)                    ; unless we're at end-of-buffer
  ;;         (newline))
  ;;       (let ((pos (point)))
  ;;         (goto-char pos)
  ;;         (org-insert-heading))))

  ;;    ;; Default fallback
  ;;    (t
  ;;     (message "Not in item or heading"))))

  ;; (defun org-smart-insert-subheading ()
  ;;   "Insert a subheading or sub-item depending on context."
  ;;   (interactive)
  ;;   (cond
  ;;    ((org-in-item-p)
  ;;     (end-of-line)
  ;;     (org-insert-item)
  ;;     (org-indent-item))
  ;;    ((org-at-heading-p)
  ;;     (org-insert-subheading nil))
  ;;    (t
  ;;     (message "Not in item or heading"))))




  (use-package recentf
    :ensure nil
    :init
    (recentf-mode 1)
    :config
    (setq recentf-max-saved-items 100
          recentf-auto-cleanup 'never
          recentf-exclude '("/tmp/" "/ssh:" "/\\.git/")))

  ;; Global keybindings
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-o") 'other-window)

  (with-eval-after-load 'evil
    (define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
    (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo))

  ;; Flyspell bindings
  (global-set-key (kbd "C-;") 'flyspell-auto-correct-word)
  (global-set-key (kbd "C-c n") 'flyspell-goto-next-error)
#+end_src

* Dictionary
#+begin_src emacs-lisp
  (use-package dictionary
    :bind (("C-c d" . dictionary-search)            ;; Prompted word lookup
           ("C-c D" . dictionary-lookup-definition)) ;; Definition at point
    :config
    (setq dictionary-server "localhost"))           ;; Use the local dictionary server
#+end_src

* Search
#+begin_src emacs-lisp
  (use-package ag
    :commands (ag ag-files ag-regexp ag-project)
    :init
    (setq ag-highlight-search t
          ag-reuse-buffers t
          ag-reuse-window t))

#+end_src
* Shell
#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq vterm-shell "zsh"))
#+end_src

* Org
#+begin_src emacs-lisp
  (defvar my-org-dir "~/Sync/aimacs/aimorg" "Directory for Org files")

  (use-package org
    ;; :ensure nil
    ;; :straight nil
    :hook (org-mode . org-indent-mode)
    :config
    (setq org-use-sub-superscripts nil
          org-log-done t
          org-startup-indented t
          org-hide-leading-stars t
          org-pretty-entities t
          org-directory my-org-dir
          org-mobile-directory org-directory
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-src-window-setup 'current-window
          org-agenda-start-on-weekday 5
          org-default-notes-file (concat my-org-dir "/0.Inbox.org")
          org-special-ctrl-a/e t
          org-agenda-files
          (remove (concat my-org-dir "/4.Archives.org")
                  (append (directory-files-recursively my-org-dir "\\.org$")
                          (directory-files-recursively "~/Workspace/" "\\.org$")))
          org-todo-keywords '((sequence "TODO(t)" "IN_PROGRESS(i)" "IN_REVIEW(r)" "|" "DONE(d)")
                              (sequence "NEXT(n)" "WAITING(w@/)" "DELEGATED(D)" "HOLD(h@/)" "|" "CANCELLED(c@/)"))
          org-global-properties '(("Effort_ALL" . "0:10 0:15 0:20 0:30 1:00 2:00 3:00 4:00 6:00 8:00"))
          org-columns-default-format "%50ITEM(Task) %TODO %TAGS %SCHEDULED %DEADLINE %Effort(Estimated Effort){:} %CLOCKSUM"
          org-archive-location (concat my-org-dir "/4.Archives.org::* From %s")
          org-refile-targets '((org-agenda-files :maxlevel . 3))
  	org-capture-templates
  	`(("i" "Inbox" entry
             (file+headline ,(expand-file-name "0.Inbox.org" my-org-dir) "Inbox")
             "*  %?\n  %i\n  %a"))
          org-agenda-window-setup 'current-window))

  (use-package org-download
  :after org
  :requires url-handlers
  :config
  (setq org-download-method 'directory)
  (setq org-download-image-dir "images"))

  (use-package evil-org
    :after (org evil)
    :hook (org-mode . evil-org-mode)
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil) ; disable default evil-collection for org if needed
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))

  (use-package toc-org
    :commands toc-org-enable
    :init
    (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

* Org Roam
#+begin_src emacs-lisp
  ;; ORG-ROAM CONFIG FOR EVIL USERS
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t) ; acknowledge v2 upgrade notice
    :custom
    (org-roam-directory (file-truename "~/Sync/aimacs/aimorg/org-roam/"))
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%dT%H%M>--${slug}.org"
                           "#+title: ${title}\n#+date: %U\n#+roam_tags:\n\n")
        :unnarrowed t)))
    (org-roam-dailies-directory "dailies/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %?"
        :if-new (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n#+filetags: :journal:\n\n"))))
    :config
    (org-roam-db-autosync-mode))
#+end_src
* Projectile
#+begin_src emacs-lisp

  (use-package project)

  ;; Projectile Configuration
  (use-package projectile
    :init
    (setq projectile-sort-order 'recentf)
    ;; Enable caching for faster project navigation
    (setq projectile-enable-caching t)
    ;; Set the default search path for projects
    (setq projectile-project-search-path '("~/AndroidStudioProjects/" "~/Workspace/"))
    ;; Automatically switch to project directory view
    (setq projectile-switch-project-action #'projectile-dired)
    :config
    ;; Enable Projectile globally
    (projectile-mode +1)

    )
  ;; Keybindings
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (my-leader-def
    "p" 'projectile-command-map  ;; Use SPC p for Projectile commands
    "/" 'projectile-ripgrep)     ;; Bind / to projectile-ripgrep under Projectile commands
#+end_src

* LSP and Programming
** Treesit
#+begin_src emacs-lisp
  ;; Ensure Tree-sitter integration (Emacs 29+)
  (use-package treesit
    :straight (:type built-in)
    :init
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (c "https://github.com/tree-sitter/tree-sitter-c")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml")
            (heex "https://github.com/phoenixframework/tree-sitter-heex")
            (elixir "https://github.com/elixir-lang/tree-sitter-elixir")))

    :config
    ;; Ensure Tree-sitter parser for a language is installed
    (defun my/ensure-treesit-parser (lang)
      "Ensure Tree-sitter parser for LANG is installed."
      (unless (treesit-language-available-p lang)
        (treesit-install-language-grammar lang)))

    ;; Install parsers for common languages
    (dolist (lang '(python javascript css html json bash elixir yaml))
      (my/ensure-treesit-parser lang))

    ;; Optional: Inspect Treesit parsing structure for debugging
    (add-hook 'js-ts-mode-hook #'treesit-inspect-mode)
    (add-hook 'typescript-ts-mode-hook #'treesit-inspect-mode))

  ;; Enhance syntax highlighting detail
  (use-package font-lock
    :straight (:type built-in)
    :config
    (setq treesit-font-lock-level 4))

  ;; Optional: tree-sitter core mode
  (use-package tree-sitter
    :hook ((prog-mode . global-tree-sitter-mode)
           (tree-sitter-after-on . tree-sitter-hl-mode))
    :config
    (setq tree-sitter-major-mode-language-alist
          '((js-mode . javascript)
            (jsx-mode . javascript)
            (php-mode . php)
            (elixir-mode . elixir)
            (yaml-mode . yaml))))

  (use-package tree-sitter-langs)
#+end_src

** Eglot

#+begin_src emacs-lisp
  ;; Ensure Tree-sitter is available
  (when (and (functionp 'treesit-available-p) (treesit-available-p))
    (message "Tree-sitter is available"))

  (use-package eglot
    :init
    (setq eglot-events-buffer-size 0
          eglot-stay-out-of '(eldoc))

    ;; Configure eglot-server-programs
    (setq eglot-server-programs
          '((python-ts-mode   . ("pyright-langserver" "--stdio"))
            (elixir-ts-mode    . ("~/.elixir-ls/release/language_server.sh"))
            (css-ts-mode       . ("vscode-css-languageserver" "--stdio"))
            (html-ts-mode      . ("vscode-html-languageserver" "--stdio"))
            ((js-ts-mode tsx-ts-mode typescript-ts-mode) . ("typescript-language-server" "--stdio"))
            (json-ts-mode      . ("vscode-json-languageserver" "--stdio"))
            (go-ts-mode        . ("gopls"))
            (yaml-ts-mode      . ("yaml-language-server" "--stdio"))
            (php-mode          . ("intelephense" "--stdio"))
            (dart-mode         . ("dart" "language-server"))))

    :hook
    ((python-ts-mode js-ts-mode tsx-ts-mode typescript-ts-mode css-ts-mode html-ts-mode json-ts-mode
                     elixir-ts-mode go-ts-mode yaml-ts-mode php-mode dart-mode)
     . eglot-ensure)

    :config
    ;; Format on save only for eglot-managed Elixir buffers
    (add-hook 'eglot-managed-mode-hook
              (lambda ()
                (when (derived-mode-p 'elixir-ts-mode)
                  (add-hook 'before-save-hook #'eglot-format-buffer -10 t))))

    ;; Integrate flymake diagnostics into eglot
    (add-hook 'eglot-managed-mode-hook
              (lambda ()
                (add-hook 'flymake-diagnostic-functions #'eglot-flymake-backend nil t))))
#+end_src

** Code Block Formatting
#+begin_src emacs-lisp
  (defun format-code-blocks ()
    "Format code blocks in the current buffer."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "#\\+begin_src \\(.*\\)" nil t)
        (let* ((lang (match-string 1)) ;; Capture the language
               (src-block (org-element-context)))
          (when (and src-block lang)
            (goto-char (org-element-property :begin src-block))
            (org-edit-special) ;; Open the source block in a temp buffer
            (let ((major-mode-fn (intern (concat lang "-mode"))))
              (when (fboundp major-mode-fn)
                ;; Activate the major mode for formatting
                (funcall major-mode-fn)
                (indent-region (point-min) (point-max)))) ;; Format code
            (org-edit-src-exit)))))) ;; Exit the source block
  (global-set-key (kbd "C-c f") #'format-code-blocks)
#+end_src

** Completion Framework
#+begin_src emacs-lisp
  ;; Corfu configuration for Evil
  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-delay 0.2)
    (corfu-auto-prefix 2)
    (corfu-quit-no-match 'separator)
    (corfu-preview-current nil)
    :bind (:map corfu-map
                ("<tab>" . corfu-next)    ;; Navigate forward
                ("S-<tab>" . corfu-previous) ;; Navigate backward
                ("C-j" . corfu-next)     ;; Evil-style downward navigation
                ("C-k" . corfu-previous)) ;; Evil-style upward navigation)
    :init
    (global-corfu-mode))
#+end_src

** Minibuffer Completion
#+begin_src emacs-lisp
  ;; Vertico configuration with Evil bindings
  (use-package vertico
    :custom
    (vertico-cycle t)
    :bind (:map vertico-map
                ("C-j" . vertico-next)     ;; Navigate down
                ("C-k" . vertico-previous) ;; Navigate up
                ("C-l" . vertico-exit)     ;; Exit completion
                ("C-h" . backward-kill-word)) ;; Kill word backward
    :init
    (vertico-mode))

#+end_src

** Search and Navigation

#+begin_src emacs-lisp
  ;; Consult with Evil-friendly keybindings
  (use-package consult
    :bind
    (:map evil-normal-state-map
          ("<leader>f" . consult-find)         ;; Search files
          ("<leader>b" . consult-buffer)       ;; Switch buffer
          ("<leader>l" . consult-line)         ;; Search in buffer
          ("<leader>g" . consult-grep)         ;; Grep search
          ("<leader>m" . consult-imenu)        ;; Jump to symbol in buffer
          ("<leader>r" . consult-recent-file)) ;; Open recent files
    :custom
    (consult-preview-key 'any)
    :hook
    (completion-list-mode . consult-preview-at-point-mode))

#+end_src

** Context-sensitive actions and annotations
#+begin_src emacs-lisp
  ;; Embark with Evil adjustments
  (use-package embark
    :bind
    (:map evil-normal-state-map
          ("<leader>." . embark-act)          ;; Contextual action
          ("<leader>;" . embark-dwim))        ;; Do what I mean
    :init
    (setq prefix-help-command #'embark-prefix-help-command))

  ;; Marginalia for annotations
  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))

#+end_src

** Syntax checking
#+begin_src emacs-lisp
  (use-package flymake
    :ensure nil ;; Flymake is built into Emacs; no need to install.
    :hook ((prog-mode . flymake-mode)       ;; Enable Flymake for programming modes.
           (text-mode . flymake-mode))     ;; Enable Flymake for text modes if desired.
    :bind (:map flymake-mode-map
                ("C-c ! l" . flymake-show-diagnostics-buffer) ;; Show diagnostics in a dedicated buffer.
                ("C-c ! n" . flymake-goto-next-error)         ;; Jump to the next error.
                ("C-c ! p" . flymake-goto-prev-error))        ;; Jump to the previous error.
    :config
    ;; Set how Flymake displays diagnostics (e.g., underline, fringe markers).
    (setq flymake-fringe-indicator-position 'right-fringe)
    (setq flymake-start-on-save-buffer t)   ;; Start checking on save.
    (setq flymake-no-changes-timeout 0.5)  ;; Start checking after 0.5s of idle time.
    (setq flymake-diagnostic-functions nil) ;; Use only external checkers or custom functions.

    ;; Optionally, configure the diagnostic display function.
    (add-hook 'flymake-mode-hook
              (lambda ()
                (setq flymake-mode-line-format
                      '(" Flymake" flymake-mode-line-exception flymake-mode-line-counters)))))

  (use-package flymake-popon
    :hook (flymake-mode . flymake-popon-mode))

#+end_src

** Prettier 
#+begin_src emacs-lisp
  (use-package prettier
    :hook ((js2-mode . prettier-mode)
  	 (rjsx-mode . prettier-mode)))

#+end_src

** Web mode 

#+begin_src emacs-lisp
  ;; Ensure web-mode is installed
  (use-package web-mode
    :mode ("\\.html?\\'" "\\.css\\'" "\\.js\\'" "\\.jsx\\'" "\\.ts\\'" "\\.tsx\\'" "\\.php\\'")
    :hook
    ((web-mode . eglot-ensure) ;; Ensure eglot LSP support for web-mode
     (web-mode . emmet-mode)   ;; Enable Emmet mode
     (web-mode . (lambda ()
                   ;; Format on save using LSP
                   (add-hook 'before-save-hook #'lsp-format-buffer nil t))))
    :config
    ;; Configure web-mode indentation and settings
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-enable-auto-quoting nil  ;; Disable automatic insertion of quotes
          web-mode-enable-auto-pairing t   ;; Enable auto-pairing of tags
          web-mode-enable-current-column-highlight t
          web-mode-enable-current-element-highlight t)

    ;; Add prettify-symbols for web-mode
    (add-hook 'web-mode-hook
              (lambda ()
                (setq prettify-symbols-alist
                      '((">=" . ?≥)
                        ("<=" . ?≤)
                        ("!=" . ?≠)
                        ("==" . ?⩵)
                        ("->" . ?→)))
                (prettify-symbols-mode 1))))

  ;; Install and configure emmet-mode
  (use-package emmet-mode
    :hook ((web-mode css-mode sgml-mode) . emmet-mode) ;; Enable Emmet in web-mode, css-mode, and sgml-mode
    :config
    ;; Optional: Keybindings for Emmet
    (define-key emmet-mode-keymap (kbd "TAB") 'emmet-expand-line) ;; Bind TAB key to expand Emmet abbreviation
    (setq emmet-expand-jsx-className? t) ;; Use `className` for JSX instead of `class`
    (setq emmet-indent-after-expansion nil)) ;; Disable extra indentation after expansion
#+end_src


** Python
#+begin_src emacs-lisp
  (use-package python
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :hook (python-mode . eglot-ensure)
    :config
    (setq python-indent-offset 4
          python-shell-interpreter "python3"))
#+end_src

** Elixir
#+begin_src emacs-lisp
  (use-package elixir-ts-mode
    :hook
    (elixir-ts-mode . eglot-ensure)
    (elixir-ts-mode . prettify-symbols-mode)
    :init
    ;; Ensure Tree-sitter support for Elixir
    (when (and (fboundp 'treesit-language-available-p)
               (not (treesit-language-available-p 'elixir)))
      (treesit-install-language-grammar 'elixir))
    :config
    ;; Set prettify symbols for Elixir
    (setq prettify-symbols-alist
          '((">=" . ?\u2265)   ;; ≥
            ("<=" . ?\u2264)   ;; ≤
            ("!=" . ?\u2260)   ;; ≠
            ("==" . ?\u2A75)   ;; ≵
            ("=~" . ?\u2245)   ;; ≅
            ("<-" . ?\u2190)   ;; ←
            ("->" . ?\u2192)   ;; →
            ("|>" . ?\u25B7))) ;; ▶
    (prettify-symbols-mode 1))
#+end_src

** Dart
#+begin_src emacs-lisp
  ;; Dart Language Configuration with eglot
  (use-package dart-mode
    :hook
    ;; Ensure eglot is initialized for dart-mode
    (dart-mode . eglot-ensure)
    :config
    ;; Optional: Format on save using eglot
    (add-hook 'eglot-managed-mode-hook
              (lambda ()
                (add-hook 'before-save-hook #'eglot-format-buffer -10 t))))

#+end_src

** JS
#+begin_src emacs-lisp
    ;; Use the new modes for JavaScript, JSX, and TypeScript
    (use-package typescript-ts-mode
      :mode "\\.ts\\'"
      :hook (typescript-ts-mode . eglot-ensure))

    (add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))  ;; JavaScript
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . tsx-ts-mode)) ;; JSX
    (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode)) ;; TypeScript
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode)) ;; TSX
  
    ;; Enable yasnippet in all JS/TS modes
  (dolist (hook '(tsx-ts-mode-hook
                  typescript-ts-mode-hook
                  js-ts-mode-hook))
    (add-hook hook #'yas-minor-mode))
#+end_src

** PHP
#+begin_src emacs-lisp
  (use-package php-mode
    :hook
    ((php-mode . eglot-ensure)  ;; Enable eglot for PHP files
     (php-mode . (lambda ()      ;; Set tab width for PHP
                   (setq tab-width 4))))
    :config
    (setq php-mode-coding-style 'psr2)  ;; PSR-2 coding standards
    ;; Optional: Enable format on save
    (add-hook 'php-mode-hook
              (lambda ()
                (add-hook 'before-save-hook #'eglot-format-buffer nil t))))
#+end_src

** PO
#+begin_src emacs-lisp
  (use-package po-mode
    :mode ("\\.po\\'" "\\.pot\\'")
    :hook (po-mode . flyspell-mode) ; Enable spell checking in po-mode
    :config
    (setq po-auto-edit-mode t          ; Automatically enable editing mode
          po-developer-mode t))        ; Enable developer mode for additional features

#+end_src

* Code Format 
#+begin_src emacs-lisp
  (defun my/format-buffer-smart ()
  "Format buffer on save using appropriate tool per language."
  (interactive)
  (cond
   ;; Use Prettier
   ((member major-mode '(js-mode js-ts-mode js2-mode typescript-mode tsx-ts-mode
                                 json-mode css-mode html-mode web-mode))
    (when (executable-find "prettier")
      (call-process-region (point-min) (point-max) "prettier" t t nil "--stdin-filepath" (or buffer-file-name ""))))

   ;; PHP
   ((member major-mode '(php-mode))
    (when (executable-find "pint")
      (shell-command (format "pint %s" (shell-quote-argument buffer-file-name)))
      (revert-buffer t t t)))

   ;; Elixir
   ((member major-mode '(elixir-mode heex-ts-mode))
    (when (executable-find "mix")
      (shell-command (format "mix format %s" (shell-quote-argument buffer-file-name)))
      (revert-buffer t t t)))

   ;; Python
   ((member major-mode '(python-mode))
    (when (executable-find "black")
      (shell-command (format "black %s" (shell-quote-argument buffer-file-name)))
      (revert-buffer t t t)))

   ;; Dart
   ((member major-mode '(dart-mode))
    (when (executable-find "dart")
      (shell-command (format "dart format %s" (shell-quote-argument buffer-file-name)))
      (revert-buffer t t t)))

   ;; Rust or fallback to eglot
   (t
    (when (and (bound-and-true-p eglot-managed-mode)
               (eglot--capability :documentFormattingProvider))
      (eglot-format-buffer)))))

  ;; Enable it globally
  (add-hook 'before-save-hook #'my/format-buffer-smart)
#+end_src
* LaTex
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :hook ((LaTeX-mode . visual-line-mode)
           (LaTeX-mode . LaTeX-math-mode)
           (LaTeX-mode . flyspell-mode)
           (LaTeX-mode . turn-on-reftex)
           (LaTeX-mode . TeX-source-correlate-mode)
           (LaTeX-mode . TeX-PDF-mode)
           (LaTeX-mode . my/latex-auto-compile))
    :config
    (with-eval-after-load 'tex
      ;; Make every file its own master file
      (setq-default TeX-master t)

      ;; Use latexmk
      (add-to-list 'TeX-command-list
                   '("LatexMk" "latexmk -pdf -shell-escape %s"
                     TeX-run-TeX nil t :help "Run LatexMk"))

      (setq TeX-command-default "LatexMk"
            TeX-auto-save t
            TeX-parse-self t
            TeX-save-query nil
            TeX-source-correlate-start-server t
            TeX-view-program-selection '((output-pdf "PDF Tools"))
            TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))

      ;; Auto open PDF in right side window
      (add-hook 'TeX-after-compilation-finished-functions
                #'my/tex-view-pdf-split)))

  (defun my/latex-auto-compile ()
    "Automatically compile LaTeX file with latexmk on save."
    (when buffer-file-name
      (add-hook 'after-save-hook
                (lambda ()
                  (when (and (derived-mode-p 'latex-mode)
                             (file-exists-p (buffer-file-name)))
                    (TeX-save-document (TeX-master-file))
                    (TeX-command "LatexMk" 'TeX-master-file)))
                nil t)))

  (defun my/tex-view-pdf-split (file)
    "Open compiled PDF FILE in a side window."
    (let ((buf (find-file-noselect file)))
      (display-buffer-in-side-window
       buf '((side . right)
             (window-width . 0.5)))))
#+end_src

* Pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install)
    (add-hook 'pdf-view-mode-hook (lambda () (display-line-numbers-mode -1)))
    (setq-default pdf-view-display-size 'fit-page))
#+end_src

* Hydra
#+begin_src emacs-lisp

  ;; (straight-use-package 'hydra)
  (use-package hydra
    :config
    ;; Example hydra for window management
    (defhydra hydra-window (:color pink :hint nil)
      "
    Movement: [_h_] left  [_j_] down  [_k_] up  [_l_] right   Actions: [_v_] split [_x_] delete [_o_] maximize [_b_] balance [_q_] quit
    "
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("v" split-window-right)
      ("x" delete-window)
      ("o" delete-other-windows)
      ("b" balance-windows)
      ("q" nil)))
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
  (my-leader-def
    "g g" 'magit-status)  ;; Use SPC g for Magit status
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-startup-banner 'official
          dashboard-center-content t
          dashboard-items '((recents . 5)
                            (projects . 5)))
    (dashboard-setup-startup-hook))
#+end_src
* Rest 

#+begin_src emacs-lisp

  ;; Enable LSP logging (optional for debugging)
  (setq lsp-log-io nil)

  (use-package yasnippet
    :hook (prog-mode . yas-minor-mode)
    :config
    (yas-global-mode 1))
  
  (use-package yasnippet-snippets
  :after yasnippet)

  ;; (straight-use-package 'editorconfig)
  (use-package editorconfig
    :config
    (editorconfig-mode 1))

  ;; Non-keybindings general settings
  (setq select-enable-clipboard t)
  (setq select-enable-primary t)

  ;; (straight-use-package 'treemacs)
  ;; (straight-use-package 'treemacs-projectile)

  (use-package treemacs
    :bind ("C-x t" . treemacs))



  ;; (straight-use-package 'expand-region)
  (use-package expand-region
    :bind ("C-=" . er/expand-region))

  ;; (straight-use-package 'smartparens)
  (use-package smartparens
    :config
    (smartparens-global-mode t))

  (use-package undo-tree
    :init
    ;; Set the directory for storing undo history files.
    (setq undo-tree-history-directory-alist
          '(("." . "~/.config/emacs/tmp/undo-tree")))

    ;; Enable auto-saving of undo history for all buffers.
    (setq undo-tree-auto-save-history t)

    ;; Show timestamps and diffs in the undo tree visualizer.
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t)

    ;; Limit undo history size for performance (optional).
    (setq undo-tree-history-limit 500
          undo-tree-strong-limit 1000
          undo-tree-outer-limit 1000000)

    :config
    ;; Enable global undo tree mode.
    (global-undo-tree-mode 1)

    ;; Set a custom keybinding for undo tree visualization.
    (global-set-key (kbd "C-x u") 'undo-tree-visualize)

    ;; Customize the visualizer mode for ease of use.
    (add-hook 'undo-tree-visualizer-mode-hook
              (lambda ()
                (define-key undo-tree-visualizer-mode-map (kbd "q") 'quit-window))))

#+end_src
* Popper 
#+begin_src emacs-lisp
  (use-package popper
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Warnings\\*"
            "\\*Dictionary\\*"
            "\\*Compile-Log\\*"
            "\\*compilation\\*"
            "\\*ag search\\*"
            "\\*Help\\*"
            "\\*eldoc\\*"
            "\\*grep\\*"
            "\\*xref\\*"
            "\\*Backtrace\\*"
            "\\*Async Shell Command\\*"
            "\\*vterm\\*"
            "\\*eshell\\*"
            "\\*shell\\*"))
    (popper-mode +1)
    (popper-echo-mode +1)
    :config
    ;; Optional: make popups display at the bottom
    (setq popper-display-control t)
    (setq popper-window-height 15)
    ;; Optional: make popups act like regular windows (useful in Evil)
    (setq popper-mode-line nil))
#+end_src

* Auth source pass
#+begin_src emacs-lisp
  (use-package auth-source-pass
    :config
    (auth-source-pass-enable))
#+end_src

* Email
** mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :load-path "/usr/share/emacs/site-lisp/elpa/mu4e-1.8.14"
    :ensure nil  ;; mu4e comes with mu on system
    :defer t
    :config
    (setq mu4e-maildir "~/.mail/gmail"
          mu4e-get-mail-command "mbsync gmail"
          mu4e-update-interval 300
          mu4e-compose-format-flowed t
          mu4e-sent-folder "/Sent"
          mu4e-drafts-folder "/Drafts"
          mu4e-trash-folder "/Trash"
          mu4e-refile-folder "/Archive"

          ;; Optional: always show images
          mu4e-view-show-images t
          mu4e-view-show-addresses t)

    ;; Use msmtp for sending mail
    (setq message-send-mail-function 'smtpmail-send-it
          sendmail-program "/usr/bin/msmtp"
          mail-specify-envelope-from t
          message-sendmail-envelope-from 'header))
#+end_src

** Gnus
#+begin_src emacs-lisp
  (setq user-full-name "Azhar Ibn Mostafiz"
        user-mail-address "theazharul@gmail.com")

  (setq gnus-select-method
        '(nnimap "gmail"
                 (nnimap-address "imap.gmail.com")
                 (nnimap-server-port 993)
                 (nnimap-stream ssl)))

  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        smtpmail-stream-type 'starttls
        smtpmail-debug-info t)

  (setq message-send-mail-function 'smtpmail-send-it)

  ;; Let auth-source-pass handle credentials
  (setq auth-sources '("pass:"))

#+end_src
