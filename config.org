#+TITLE: AIM Emacs Configuration
#+AUTHOR: Azhar Ibn Mostafiz
#+OPTIONS: toc:2

* TABLE OF CONTENT :toc: 

* Initialization and Setup
#+begin_src emacs-lisp
;; Bootstrap straight.el
(setq bootstrap-version 6)
(let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
(bootstrap-url "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"))
(unless (file-exists-p bootstrap-file)
(with-current-buffer
(url-retrieve-synchronously bootstrap-url 'silent 'inhibit-cookies)
(goto-char (point-max))
(eval-print-last-sexp)))
(load bootstrap-file nil 'nomessage))

;; Use straight.el by default for all packages
(setq straight-use-package-by-default t)

;; Ensure essential packages
(straight-use-package 'use-package) ;; Ensure `use-package` is installed
(straight-use-package 'org)        ;; Ensure the latest version of Org mode
#+end_src

* Evil

#+begin_src emacs-lisp

      ;; Initialize Evil mode
      (use-package evil
        :init
        (setq evil-want-integration t
              evil-want-keybinding nil
  evil-undo-system 'undo-tree
    ) ;; Set before loading Evil
        :config
        (evil-mode 1))

      ;; Configure Evil Collection
      (use-package evil-collection
        :after evil
        :config
        (evil-collection-init))
#+end_src

* Basic Configuration
#+begin_src emacs-lisp
(use-package emacs
        :init
        ;; Set backup directory
        (setq backup-directory-alist `(("." . "~/.config/emacs/tmp/backups")))
        ;; Set auto-save directory
        (setq auto-save-file-name-transforms `((".*" "~/.config/emacs/tmp/auto-save/" t)))
        ;; Disable lockfiles (#filename#)
        (setq create-lockfiles nil)
        :config
        ;; Ensure directories exist
        (dolist (dir '("~/.config/emacs/tmp/backups"
                       "~/.config/emacs/tmp/auto-save"
                       "~/.config/emacs/tmp/undo-tree"))
          (unless (file-exists-p dir)
            (make-directory dir t))))
#+end_src
* User Interface and Appearance 

#+begin_src emacs-lisp

  ;; Core UI Configuration

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)


  (straight-use-package 'all-the-icons)
  (use-package all-the-icons
    :ensure t)



  (straight-use-package 'rainbow-delimiters)
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))



  (straight-use-package 'highlight-indent-guides)
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character))


#+end_src

* Themes and Fonts
#+begin_src emacs-lisp
  (straight-use-package 'doom-themes)
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-gruvbox t))


  (defun my/create-directory-if-needed (dir)
    "Create directory DIR if it doesn't exist."
    (unless (file-exists-p dir)
      (make-directory dir t)))

  (defun my/download-font (url font-name install-dir)
    "Download and install a font from URL, save it to INSTALL-DIR."
    (my/create-directory-if-needed install-dir)  ;; Ensure the directory exists
    (let ((font-file (expand-file-name (concat font-name ".ttf") install-dir)))
      (unless (file-exists-p font-file)
        (url-copy-file url font-file t)
        (message "Downloaded font: %s" font-file))
      font-file))

  (defun my/install-font (font-file font-name)
    "Install a font from FONT-FILE and apply it to Emacs."
    (when (file-exists-p font-file)
      (message "Installing font %s..." font-name)
      (set-fontset-font t 'unicode font-file nil 'prepend)
      (set-face-attribute 'default nil :font font-name :height 140)
      (message "Font %s installed and applied." font-name)))

  (defun my/load-source-code-pro-font ()
    "Download and apply Source Code Pro font."
    (let* ((font-name "Source Code Pro")
           (font-url "https://github.com/adobe-fonts/source-code-pro/releases/download/variable-fonts/SourceCodePro-VariableFont_wght.ttf")
           (font-install-dir (expand-file-name "assets/fonts" user-emacs-directory))  ;; Use the assets folder
           (font-file (my/download-font font-url font-name font-install-dir)))
      (my/install-font font-file font-name)))

  ;; Call this function to download and install the font
  (my/load-source-code-pro-font)

  
  ;; Set font 
  (set-face-attribute 'default nil :font "Source Code Pro" :height 130)
#+end_src

* Keybindings 
#+begin_src emacs-lisp
    ;; Core Keybindings Configuration

    ;; General keybindings
    (use-package general
      :ensure t
      :config
      (general-create-definer my-leader-def
        :keymaps 'normal  ;; Normal mode for Evil
        :prefix "SPC"    ;; Leader key is SPC
        :global-prefix "M-m"))  ;; Global prefix (Alt+m) if you want to use it outside Evil


    ;; File-related operations under 'f'
    (my-leader-def
      "f"  '(:ignore t :which-key "file") ;; Group file operations under 'f'
      "f s" 'save-buffer          ;; Save the current buffer
      "f S" 'save-some-buffers    ;; Save all buffers
      "f f" 'find-file            ;; Find a file
      "f r" 'recentf-open-files   ;; Open recent files
      "f d" 'dired                ;; Open dired (directory manager)
      "f n" 'make-frame-command   ;; Create a new frame (optional)
      "f o" 'find-file-other-window) ;; Open file in another window

    ;; Buffer-related operations under 'b'
    (my-leader-def
      "b"  '(:ignore t :which-key "buffer") ;; Group buffer operations under 'b'
      "b b" 'switch-to-buffer        ;; Switch to an existing buffer
      "b k" 'kill-buffer             ;; Kill the current buffer
      "b K" 'kill-buffer-and-window  ;; Kill the buffer and its window
      "b n" 'next-buffer             ;; Switch to the next buffer
      "b p" 'previous-buffer        ;; Switch to the previous buffer
      "b d" 'display-buffer         ;; Display buffer in another window
      "b r" 'rename-buffer          ;; Rename the current buffer
      "b l" 'list-buffers           ;; List all open buffers
      "b m" 'switch-to-buffer      ;; Interactive buffer switch

      ;; More buffer-related operations can be added here
      )

    ;; Window management (SPC w)
    (my-leader-def
      "w"  '(:ignore t :which-key "window") ;; Group window management under 'w'
      "w k" 'windmove-up        ;; Navigate to the window above
      "w j" 'windmove-down      ;; Navigate to the window below
      "w h" 'windmove-left      ;; Navigate to the window on the left
      "w l" 'windmove-right     ;; Navigate to the window on the right
      "w s" 'split-window-below    ;; Split the window horizontally
      "w v" 'split-window-right    ;; Split the window vertically
      "w w" 'other-window          ;; Switch to the other window
      "w d" 'delete-window         ;; Delete the current window
      "w =" 'balance-windows       ;; Balance window sizes
      "w m" 'delete-other-windows  ;; Maximize the current window
      "w x" 'winner-undo           ;; Undo window configuration changes
      "w X" 'winner-redo           ;; Redo window configuration changes
      )

    ;; Search commands (SPC s)
    (my-leader-def
      "s"  '(:ignore t :which-key "search") ;; Group search commands under 's'
      "s f" 'swiper                ;; Search with swiper (interactive search)
      "s r" 'replace-string        ;; Replace a string
      "s p" 'projectile-ag         ;; Search within the project with ag (requires Projectile)
      "s b" 'consult-buffer        ;; Search buffers with consult (if installed)
      "s t" 'consult-theme         ;; Search and switch themes with consult (if installed)

      ;; More custom commands can be added here, depending on your needs
      )

  
      ;; Keybindings for Org mode
      (my-leader-def
        "o"  '(:ignore t :which-key "Org")  ;; Group Org mode commands under 'o'
        "o a" 'org-agenda                   ;; Open Org agenda
        "o c" 'org-capture                  ;; Capture a new entry
        "o l" 'org-store-link               ;; Store a link for later use
        "o t" 'org-todo                     ;; Change the todo state
        "o s" 'org-schedule                 ;; Schedule a task
        "o d" 'org-deadline                 ;; Set a deadline for a task
        )

    ;; Enable recentf for recent file operations
    (use-package recentf
      :ensure nil
      :init
      (recentf-mode 1)
      (setq recentf-max-saved-items 25))

    ;; Global keybindings
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (global-set-key (kbd "M-o") 'other-window)

  (define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
  (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)

#+end_src

* Org

#+begin_src emacs-lisp

      ;; Configure Org using use-package
      (use-package org
        :ensure nil  ;; Don't try to install it again, since it's handled by straight
        :straight t  ;; Ensure Org is managed by straight.el
        :config
        (require 'org-id)
        (setq org-use-sub-superscripts nil                     ;; Disable subscripts globally
              org-log-done t                                   ;; Log completion of tasks
              org-startup-indented t                           ;; Start Org with indented content
              org-hide-leading-stars t                         ;; Hide leading stars in headings
              org-pretty-entities t                            ;; Display pretty entities (e.g., Greek letters)
              org-directory "~/Dropbox/aimacs/aimorg"          ;; Org directory
              org-mobile-directory org-directory              ;; Same as org-directory
              org-src-fontify-natively t                       ;; Syntax highlighting in source blocks
              org-src-tab-acts-natively t                      ;; TAB acts natively in source blocks
              org-src-window-setup 'current-window             ;; Use current window for editing source blocks
              org-agenda-start-on-weekday 5                    ;; Start agenda on Friday
              org-default-notes-file (concat org-directory "/0.Inbox.org") ;; Default notes file
              org-special-ctrl-a/e t                           ;; Enable special C-a and C-e behavior
              org-agenda-files
              (remove "~/Dropbox/aimacs/aimorg/4.Archives.org"
                      (append (directory-files-recursively "~/Dropbox/aimacs/aimorg/" "\\.org$")
                              (directory-files-recursively "~/Workspace/" "\\.org$")))
              org-todo-keywords '((sequence "TODO(t)" "IN_PROGRESS(i)" "IN_REVIEW(r)" "|" "DONE(d)")
                                  (sequence "NEXT(n)" "WAITING(w@/)" "DELEGATED(D)" "HOLD(h@/)" "|" "CANCELLED(c@/)"))
              org-global-properties '(("Effort_ALL" . "0:10 0:15 0:20 0:30 1:00 2:00 3:00 4:00 6:00 8:00"))
              org-columns-default-format "%50ITEM(Task) %TODO %TAGS %SCHEDULED %DEADLINE %Effort(Estimated Effort){:} %CLOCKSUM"
              org-archive-location "~/Dropbox/aimacs/aimorg/4.Archives.org::* From %s"
              org-refile-targets '((org-agenda-files :maxlevel . 3))
              org-capture-templates '(("i" "Inbox" entry (file+headline "~/Dropbox/aimacs/aimorg/0.Inbox.org" "Inbox")
                                       "* %?\n"))
              org-agenda-window-setup 'current-window))
      ;; Open agenda in current window


      ;; Org-superstar for improved aesthetics and indentation
      (use-package org-superstar
        :ensure t
        :hook (org-mode . org-superstar-mode)
        :custom
        ;; Headline bullets
        (org-superstar-headline-bullets-list '("◉" "○" "✸" "✿"))
        ;; Item bullets (ensure proper alignment)
        (org-superstar-item-bullet-alist '((?- . "•") (?- . "➤") (?- . "‣")))
        ;; Aligning the items and headings
        (org-superstar-heading-align t)
        (org-superstar-item-align t)         ;; Ensure items align under the heading
        (org-superstar-leading-bullet ?\s)   ;; Use space for leading bullet
        (org-hide-leading-stars t)           ;; Hide leading stars
        (org-superstar-pretty-lists t)       ;; Pretty lists (with custom bullets)
        ;; Aligning bullets with text for consistency
        (org-superstar-align (quote left))
        ;; Indentation for proper alignment of subheadings and items
        (org-startup-indented t))            ;; Make sure everything aligns properly

      (use-package toc-org
        :commands toc-org-enable
        :init
        (add-hook 'org-mode-hook 'toc-org-enable)
        )
#+end_src

* Projectile
#+begin_src emacs-lisp
      ;; Ensure Projectile is installed
      (straight-use-package 'projectile)

      ;; Projectile Configuration
      (use-package projectile
        :ensure t
        :init
        ;; Enable caching for faster project navigation
        (setq projectile-enable-caching t)

        ;; Set the default search path for projects
        (setq projectile-project-search-path '("~/projects/" "~/Workspace/"))

        ;; Automatically switch to project directory view
        (setq projectile-switch-project-action #'projectile-dired)
        :config
        ;; Enable Projectile globally
        (projectile-mode +1)

        ;; Keybindings
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

        (my-leader-def
          "p" 'projectile-command-map  ;; Use SPC p for Projectile commands
          "/" 'projectile-ripgrep)     ;; Bind / to projectile-ripgrep under Projectile commands



        ;; Optional: Integrate with Ivy for better completion
        (use-package counsel-projectile
          :ensure t
          :config
          (counsel-projectile-mode 1)))
#+end_src

* LSP and Programming

#+begin_src emacs-lisp

      ;; LSP Mode Configuration 
      (use-package lsp-mode
        :straight t
        :init
        (setq lsp-keymap-prefix "C-c l")          ;; Keymap prefix for LSP commands
        (setq lsp-completion-provider :capf)      ;; Use native completion-at-point (capf) for completions
  (setq lsp-enable-on-type-formatting t ) ;; Enable on-type formatting
  (setq lsp-enable-indentation t)
        :hook
        ((php-mode dart-mode python-mode js-mode elixir-mode web-mode) . lsp-deferred) ;; Enable LSP for specific modes
        :commands lsp lsp-deferred
        :config
        (setq lsp-enable-snippet t)               ;; Enable snippet support
        (setq lsp-enable-file-watchers t)         ;; Enable file watchers for LSP features
        (setq lsp-headerline-breadcrumb-enable t) ;; Enable breadcrumb in headerline
        (setq lsp-format-on-save t)               ;; Enable format on save
        (setq lsp-log-io nil)                     ;; Disable logging by default for better performance
        (setq lsp-idle-delay 0.500)               ;; Set idle delay for completion to 500ms
        (setq lsp-completion-use-capf t)          ;; Use native LSP completions (better with `company-mode`)
        (setq lsp-diagnostics-provider :flycheck) ;; Use Flycheck for diagnostics, improving accuracy
        (setq lsp-diagnostics-max-number 100)     ;; Limit the number of diagnostics shown
        (setq lsp-file-watch-threshold 500)      ;; Limit the number of watched files
  (add-hook 'prog-mode-hook #'lsp)
    (add-hook 'before-save-hook #'lsp-format-buffer)
    )

      ;; Associate .heex and .html.heex files with Elixir mode in LSP
      (with-eval-after-load 'lsp-mode
        (add-to-list 'lsp-language-id-configuration '("\\.heex\\'" . "elixir"))
        (add-to-list 'lsp-language-id-configuration '("\\.html.heex\\'" . "elixir")))


      ;; Optional UI Enhancements for LSP
      (use-package lsp-ui
        :straight t
        :after lsp-mode
        :hook (lsp-mode . lsp-ui-mode)
        :config
        (setq lsp-ui-doc-enable t
              lsp-ui-doc-delay 0.5
              lsp-ui-doc-position 'at-point
              lsp-ui-sideline-enable t
              lsp-ui-sideline-show-diagnostics t
              lsp-ui-peek-enable t
              lsp-ui-flycheck-enable t
              lsp-ui-sideline-show-hover t))

      ;; Ensure web-mode is installed
      (use-package web-mode
        :straight t
        :mode ("\\.html\\'" "\\.css\\'" "\\.js\\'" "\\.heex\\'")
        :hook
        ((web-mode . lsp-deferred) ;; Enable LSP for web-mode
         (web-mode . emmet-mode)  ;; Enable Emmet mode
         (web-mode . (lambda ()
                       ;; Format on save
                       (add-hook 'before-save-hook #'lsp-format-buffer nil t))))
        :config
        ;; Configure web-mode indentation and settings
        (setq web-mode-markup-indent-offset 2
              web-mode-code-indent-offset 2
              web-mode-css-indent-offset 2
              web-mode-enable-auto-quoting nil ;; Disable automatic insertion of quotes
              web-mode-enable-auto-pairing t  ;; Enable auto pairing of tags
              web-mode-enable-current-column-highlight t
              web-mode-enable-current-element-highlight t)

        ;; Add prettify-symbols for web-mode
        (add-hook 'web-mode-hook
                  (lambda ()
                    (push '(">=" . ?\u2265) prettify-symbols-alist)
                    (push '("<=" . ?\u2264) prettify-symbols-alist)
                    (push '("!=" . ?\u2260) prettify-symbols-alist)
                    (push '("==" . ?\u2A75) prettify-symbols-alist)
                    (push '("->" . ?\u2192) prettify-symbols-alist)
                    (prettify-symbols-mode 1))))

      ;; Install and configure emmet-mode
      (use-package emmet-mode
        :straight t
        :hook ((web-mode css-mode sgml-mode) . emmet-mode) ;; Enable Emmet in web-mode, css-mode, and sgml-mode
        :config
        ;; Optional: Keybindings for Emmet
        (define-key emmet-mode-keymap (kbd "TAB") 'emmet-expand-line) ;; Bind TAB key to expand Emmet abbreviation
        (setq emmet-expand-jsx-className? t) ;; Use `className` instead of `class` for JSX
        (setq emmet-indent-after-expansion nil)) ;; Optional: Disable extra indentation after expansion

      ;; Elixir Mode Configuration for LSP and Phoenix LiveView
      (use-package elixir-mode
        :straight t
        :mode ("\\.ex\\'" "\\.exs\\'" "\\.html\\.heex\\'" "\\.heex\\'")
        :hook
        ((elixir-mode . lsp-deferred)  ;; Enable LSP for Elixir
         (elixir-mode . emmet-mode)   ;; Enable Emmet mode
         (elixir-mode . (lambda ()    ;; Prettify symbols
                          (setq prettify-symbols-alist
                                '((">=" . ?\u2265) ("<=" . ?\u2264)
                                  ("!=" . ?\u2260) ("==" . ?\u2A75)
                                  ("=~" . ?\u2245) ("<-" . ?\u2190)
                                  ("->" . ?\u2192) ("|>" . ?\u25B7)))
                          (prettify-symbols-mode 1))))
        :config
        ;; Register .heex files as Elixir for LSP
        (with-eval-after-load 'lsp-mode
          (add-to-list 'lsp-language-id-configuration '(elixir-mode . "elixir"))
          (add-to-list 'lsp-language-id-configuration '(web-mode . "html"))))

      ;; Polymode for Elixir Templates with ~H
      (use-package polymode
        :straight t
        :config
        (define-hostmode poly-elixir-hostmode :mode 'elixir-mode)
        (define-innermode poly-liveview-elixir-innermode
          :mode 'web-mode
          :head-matcher (rx line-start (* space) "~H" (= 3 (char "\"'")) line-end)
          :tail-matcher (rx line-start (* space) (= 3 (char "\"'")) line-end)
          :head-mode 'host
          :tail-mode 'host
          :allow-nested nil
          :keep-in-mode 'host
          :fallback-mode 'host)
        (define-polymode poly-elixir-web-mode
          :hostmode 'poly-elixir-hostmode
          :innermodes '(poly-liveview-elixir-innermode)))

      ;; Flycheck for Elixir
      (use-package flycheck
        :straight t
        :hook (elixir-mode . flycheck-mode)
        :config
        (setq flycheck-checker 'elixir-credo
              flycheck-indication-mode 'right-fringe
              flycheck-highlighting-mode 'symbols))

      ;; Python Language Configuration

      (when (featurep 'lsp-config)
        (straight-use-package 'python-mode)
        (require 'python-mode)

        ;; Setup LSP for Python
        (add-hook 'python-mode-hook #'lsp)

        ;; Format on save
        (add-hook 'python-mode-hook
                  (lambda ()
                    (add-hook 'before-save-hook 'lsp-format-buffer nil t))))

      ;; JavaScript Language Configuration

      (when (featurep 'lsp-config)
        (straight-use-package 'js2-mode)
        (require 'js2-mode)
        (straight-use-package 'lsp-mode)

        ;; Setup LSP for JavaScript (and TypeScript)
        (add-hook 'js2-mode-hook #'lsp)

        ;; Format on save
        (add-hook 'js2-mode-hook
                  (lambda ()
                    (add-hook 'before-save-hook 'lsp-format-buffer nil t))))

      ;; Dart Language Configuration

      (when (featurep 'lsp-config)
        (straight-use-package 'dart-mode)
        (require 'dart-mode)

        ;; Setup LSP for Dart
        (add-hook 'dart-mode-hook #'lsp)

        ;; Format on save
        (add-hook 'dart-mode-hook
                  (lambda ()
                    (add-hook 'before-save-hook 'lsp-format-buffer nil t))))

      (use-package dart-mode
        :straight t
        :hook (dart-mode . lsp))

      (use-package mix
        :after elixir-mode)
#+end_src
* Rest 

#+begin_src emacs-lisp
      ;; Optional Completion Framework
      (use-package company
        :straight t
        :hook (prog-mode . company-mode)
        :config
        (setq company-minimum-prefix-length 2
              company-idle-delay 0.2
              company-backends '(company-capf))
        (setq company-dabbrev-downcase nil)
        (setq company-show-numbers t)
        (setq company-tooltip-align-annotations t))

      ;; Optional Syntax Checking with Flycheck
      (use-package flycheck
        :straight t
        :hook (prog-mode . flycheck-mode)
        :config
        (setq flycheck-indication-mode 'right-fringe
              flycheck-highlighting-mode 'symbols
              flycheck-check-syntax-automatically '(mode-enabled save)
              flycheck-display-errors-delay 0.3))

      ;; Enable LSP logging (optional for debugging)
      (setq lsp-log-io nil)

      (use-package pdf-tools
        :ensure t
        :config
        (pdf-tools-install)
        (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
              TeX-source-correlate-start-server t)
        (add-hook 'TeX-after-compilation-finished-functions
                  #'TeX-revert-document-buffer))
      (setq TeX-source-correlate-mode t
            TeX-source-correlate-start-server t)

      (straight-use-package 'which-key)
      (use-package which-key
        :ensure t
        :config
        (which-key-mode)
        (setq which-key-idle-delay 0.3))

      (straight-use-package 'hydra)
      (use-package hydra
        :ensure t
        :config
        ;; Example hydra for window management
        (defhydra hydra-window (:color pink :hint nil)
          "
        Movement: [_h_] left  [_j_] down  [_k_] up  [_l_] right   Actions: [_v_] split [_x_] delete [_o_] maximize [_b_] balance [_q_] quit
        "
          ("h" windmove-left)
          ("j" windmove-down)
          ("k" windmove-up)
          ("l" windmove-right)
          ("v" split-window-right)
          ("x" delete-window)
          ("o" delete-other-windows)
          ("b" balance-windows)
          ("q" nil)))


      (straight-use-package 'ivy)
      (straight-use-package 'counsel)
      (straight-use-package 'swiper)

      (use-package ivy
        :ensure t
        :config
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t
              ivy-count-format "(%d/%d) "))
      (use-package counsel
        :after ivy
        :config
        (counsel-mode 1))
      (use-package swiper
        :after ivy
        :bind ("C-s" . swiper))

      (straight-use-package 'magit)
      (use-package magit
        :ensure t
        :bind ("C-x g" . magit-status))
      (my-leader-def
        "g g" 'magit-status)  ;; Use SPC g for Magit status

      (straight-use-package 'yasnippet)
      (use-package yasnippet
        :ensure t
        :config
        (yas-global-mode 1))

      (straight-use-package 'flycheck)
      (use-package flycheck
        :ensure t
        :init (global-flycheck-mode))

      (straight-use-package 'editorconfig)
      (use-package editorconfig
        :ensure t
        :config
        (editorconfig-mode 1))

      ;; Non-keybindings general settings
      (use-package emacs
        :config
        (setq display-line-numbers-type 't) ;; or 'relative
        (global-display-line-numbers-mode 1)
        (global-visual-line-mode 1)

        ;; Disable in specific modes
        (dolist (mode '(org-mode-hook
                        eshell-mode-hook
                        term-mode-hook))
          (add-hook mode (lambda () (display-line-numbers-mode 0)))))

      (setq select-enable-clipboard t)
      (setq select-enable-primary t)


      (straight-use-package 'treemacs)
      (straight-use-package 'treemacs-projectile)

      (use-package treemacs
        :ensure t
        :bind ("C-x t" . treemacs))

      (straight-use-package 'dashboard)
      (use-package dashboard
        :ensure t
        :config
        (setq dashboard-startup-banner 'official
              dashboard-center-content t
              dashboard-items '((recents . 5)
                                (projects . 5)))
        (dashboard-setup-startup-hook))

      (straight-use-package 'evil-mc)
      (use-package evil-mc
        :ensure t
        :config
        ;; Enable evil-mc globally
        (global-evil-mc-mode 1)
        )

      (straight-use-package 'expand-region)
      (use-package expand-region
        :ensure t
        :bind ("C-=" . er/expand-region))

      (straight-use-package 'smartparens)
      (use-package smartparens
        :ensure t
        :config
        (smartparens-global-mode t))

      (use-package undo-tree
        :straight t
        :init
        ;; Set the directory for storing undo history files.
        (setq undo-tree-history-directory-alist
              '(("." . "~/.config/emacs/tmp/undo-tree")))

        ;; Enable auto-saving of undo history for all buffers.
        (setq undo-tree-auto-save-history t)

        ;; Show timestamps and diffs in the undo tree visualizer.
        (setq undo-tree-visualizer-timestamps t
              undo-tree-visualizer-diff t)

        ;; Limit undo history size for performance (optional).
        (setq undo-tree-history-limit 500
              undo-tree-strong-limit 1000
              undo-tree-outer-limit 1000000)

        :config
        ;; Enable global undo tree mode.
        (global-undo-tree-mode 1)

        ;; Set a custom keybinding for undo tree visualization.
        (global-set-key (kbd "C-x u") 'undo-tree-visualize)

        ;; Customize the visualizer mode for ease of use.
        (add-hook 'undo-tree-visualizer-mode-hook
                  (lambda ()
                    (define-key undo-tree-visualizer-mode-map (kbd "q") 'quit-window))))


      ;; config/autocompletion/company.el

      (straight-use-package 'company)
      (require 'company)

      ;; Enable company mode globally
      (add-hook 'after-init-hook 'global-company-mode)

      ;; Set some custom company options
      (setq company-idle-delay 0.2)  ;; Time before suggestions pop up
      (setq company-minimum-prefix-length 2)  ;; Start suggesting after typing 2 characters

      ;; Enable company-mode in specific major modes, such as programming languages
      (add-hook 'prog-mode-hook 'company-mode)  ;; Enable in programming modes
#+end_src
