#+TITLE: AIM Emacs Configuration
#+AUTHOR: Azhar Ibn Mostafiz
#+OPTIONS: toc:2

* TABLE OF CONTENT :toc:
- [[#initialization-and-setup][Initialization and Setup]]
- [[#evil][Evil]]
- [[#basic-configuration][Basic Configuration]]
- [[#user-interface-and-appearance][User Interface and Appearance]]
- [[#themes-and-fonts][Themes and Fonts]]
- [[#keybindings][Keybindings]]
- [[#shell][Shell]]
- [[#org][Org]]
- [[#projectile][Projectile]]
- [[#lsp-and-programming][LSP and Programming]]
  - [[#lsp][LSP]]
  - [[#company][Company]]
  - [[#polymode][Polymode]]
  - [[#flycheck][Flycheck]]
  - [[#prettier][Prettier]]
  - [[#web-mode][Web mode]]
  - [[#python][Python]]
  - [[#elixir][Elixir]]
  - [[#dart][Dart]]
  - [[#js][JS]]
  - [[#php][PHP]]
  - [[#po][PO]]
- [[#rest][Rest]]

* Initialization and Setup
#+begin_src emacs-lisp
  ;; Bootstrap straight.el
  (setq bootstrap-version 6)
  (let ((bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-url "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously bootstrap-url 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Use straight.el by default for all packages
  (setq straight-use-package-by-default t)

  ;; Ensure essential packages
  (straight-use-package 'use-package)  ;; Ensure `use-package` is installed
#+end_src

* Evil

#+begin_src emacs-lisp
  ;; Initialize Evil mode
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-undo-system 'undo-tree) ;; Set before loading Evil
    :config
    (evil-mode 1))

  ;; Configure Evil Collection
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :straight t
    :after evil
    :config
    (evil-commentary-mode))

#+end_src

* Basic Configuration
#+begin_src emacs-lisp
  (use-package emacs
    :init
    ;; Set backup directory
    (setq backup-directory-alist `(("." . "~/.config/emacs/tmp/backups")))
    ;; Set auto-save directory
    (setq auto-save-file-name-transforms `((".*" "~/.config/emacs/tmp/auto-save/" t)))
    ;; Disable lockfiles (#filename#)
    (setq create-lockfiles nil)
    :config
    ;; Ensure directories exist
    (dolist (dir '("~/.config/emacs/tmp/backups"
                   "~/.config/emacs/tmp/auto-save"
                   "~/.config/emacs/tmp/undo-tree"))
      (unless (file-exists-p dir)
        (make-directory dir t))))
#+end_src

* User Interface and Appearance
#+begin_src emacs-lisp
  ;; Core UI Configuration
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)

  (straight-use-package 'all-the-icons)
  (use-package all-the-icons :ensure t)

  (straight-use-package 'rainbow-delimiters)
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  (straight-use-package 'highlight-indent-guides)
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character))
#+end_src

* Themes and Fonts
#+begin_src emacs-lisp
  (straight-use-package 'doom-themes)
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-gruvbox t))

  (defvar my-org-dir "~/Dropbox/aimacs/aimorg" "Directory for Org files")

  (defun my/create-directory-if-needed (dir)
    "Create directory DIR if it doesn't exist."
    (unless (file-exists-p dir)
      (make-directory dir t)))

  (defun my/download-font (url font-name install-dir)
    "Download and install a font from URL, save it to INSTALL-DIR."
    (my/create-directory-if-needed install-dir)
    (let ((font-file (expand-file-name (concat font-name ".ttf") install-dir)))
      (unless (file-exists-p font-file)
        (url-copy-file url font-file t)
        (message "Downloaded font: %s" font-file))
      font-file))

  (defun my/install-font (font-file font-name)
    "Install a font from FONT-FILE and apply it to Emacs."
    (when (file-exists-p font-file)
      (message "Installing font %s..." font-name)
      (set-fontset-font t 'unicode font-file nil 'prepend)
      (set-face-attribute 'default nil :font font-name :height 140)
      (message "Font %s installed and applied." font-name)))

  (defun my/load-source-code-pro-font ()
    "Download and apply Source Code Pro font."
    (let* ((font-name "Source Code Pro")
           (font-url "https://github.com/adobe-fonts/source-code-pro/releases/download/variable-fonts/SourceCodePro-VariableFont_wght.ttf")
           (font-install-dir (expand-file-name "assets/fonts" user-emacs-directory))
           (font-file (my/download-font font-url font-name font-install-dir)))
      (my/install-font font-file font-name)))

  (unless (member "Source Code Pro" (font-family-list))
    (my/load-source-code-pro-font))

  (set-face-attribute 'default nil :font "Source Code Pro" :height 130)
#+end_src

* Keybindings
#+begin_src emacs-lisp
        ;; Core Keybindings Configuration

        (use-package general
          :ensure t
          :config
          (general-create-definer my-leader-def
            :keymaps 'normal
            :prefix "SPC"
            :global-prefix "M-m"))

        (my-leader-def
    "t v" '(toggle-vterm :which-key "Toggle vterm")
    )

        ;; File-related operations under 'f'
        (my-leader-def
          "f"  '(:ignore t :which-key "file")
          "f s" 'save-buffer
          "f S" 'save-some-buffers
          "f f" 'find-file
          "f r" 'recentf-open-files
          "f d" 'dired
          "f n" 'make-frame-command
          "f o" 'find-file-other-window)

        ;; Buffer-related operations under 'b'
        (my-leader-def
          "b"  '(:ignore t :which-key "buffer")
          "b b" 'switch-to-buffer
          "b k" 'kill-buffer
          "b K" 'kill-buffer-and-window
          "b n" 'next-buffer
          "b p" 'previous-buffer
          "b d" 'display-buffer
          "b r" 'rename-buffer
          "b l" 'list-buffers
          "b m" 'switch-to-buffer)

        ;; Window management (SPC w)
        (my-leader-def
          "w"  '(:ignore t :which-key "window")
          "w k" 'windmove-up
          "w j" 'windmove-down
          "w h" 'windmove-left
          "w l" 'windmove-right
          "w s" 'split-window-below
          "w v" 'split-window-right
          "w w" 'other-window
          "w d" 'delete-window
          "w =" 'balance-windows
          "w m" 'delete-other-windows
          "w x" 'winner-undo
          "w X" 'winner-redo)

        ;; Search commands (SPC s)
        (my-leader-def
          "s"  '(:ignore t :which-key "search")
          "s f" 'swiper
          "s r" 'replace-string
          "s p" 'projectile-ag
          "s b" 'consult-buffer
          "s t" 'consult-theme)

        ;; Keybindings for Org mode
        (my-leader-def
          "o"  '(:ignore t :which-key "Org")
          "o a" 'org-agenda
          "o c" 'org-capture
          "o l" 'org-store-link
          "o t" 'org-todo
          "o s" 'org-schedule
          "o d" 'org-deadline
  "o P" 'org-paste-subtree)

        ;; Enable recentf for recent file operations
        (use-package recentf
          :straight t
          :init
          (recentf-mode 1)
          :config
          (setq recentf-max-saved-items 100
                recentf-auto-cleanup 'never
                recentf-exclude '("/tmp/" "/ssh:" "/\\.git/")))

        (global-set-key (kbd "C-x C-b") 'ibuffer)
        (global-set-key (kbd "M-o") 'other-window)

        (define-key evil-normal-state-map (kbd "u") 'undo-tree-undo)
        (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
#+end_src

* Shell
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :init
  ;; Function to toggle vterm in the minibuffer
  (defun toggle-vterm ()
    "Toggle vterm in the minibuffer."
    (interactive)
    (let ((vterm-buffer-name "*vterm*"))
      (if (get-buffer vterm-buffer-name)
          (if (get-buffer-window vterm-buffer-name)
              (delete-window (get-buffer-window vterm-buffer-name)) ;; Close vterm
            (pop-to-buffer vterm-buffer-name))                     ;; Show vterm
        (vterm)))) ;; Open vterm if not exists
)
#+end_src
* Org
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :straight nil
    :config
    (setq org-use-sub-superscripts nil
          org-log-done t
          org-startup-indented t
          org-hide-leading-stars t
          org-pretty-entities t
          org-directory my-org-dir
          org-mobile-directory org-directory
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-src-window-setup 'current-window
          org-agenda-start-on-weekday 5
          org-default-notes-file (concat my-org-dir "/0.Inbox.org")
          org-special-ctrl-a/e t
          org-agenda-files
          (remove (concat my-org-dir "/4.Archives.org")
                  (append (directory-files-recursively my-org-dir "\\.org$")
                          (directory-files-recursively "~/Workspace/" "\\.org$")))
          org-todo-keywords '((sequence "TODO(t)" "IN_PROGRESS(i)" "IN_REVIEW(r)" "|" "DONE(d)")
                              (sequence "NEXT(n)" "WAITING(w@/)" "DELEGATED(D)" "HOLD(h@/)" "|" "CANCELLED(c@/)"))
          org-global-properties '(("Effort_ALL" . "0:10 0:15 0:20 0:30 1:00 2:00 3:00 4:00 6:00 8:00"))
          org-columns-default-format "%50ITEM(Task) %TODO %TAGS %SCHEDULED %DEADLINE %Effort(Estimated Effort){:} %CLOCKSUM"
          org-archive-location (concat my-org-dir "/4.Archives.org::* From %s")
          org-refile-targets '((org-agenda-files :maxlevel . 3))
          org-capture-templates '(("i" "Inbox" entry (file+headline my-org-dir "/0.Inbox.org" "Inbox")
                                   "* %?\n"))
          org-agenda-window-setup 'current-window))


  (use-package org-modern
    :ensure t
    :hook (org-mode . org-modern-mode))

  (use-package toc-org
    :ensure t
    :commands toc-org-enable
    :init
    (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

* Projectile
#+begin_src emacs-lisp
  ;; Ensure Projectile is installed
  (straight-use-package 'projectile)

  ;; Projectile Configuration
  (use-package projectile
    :ensure t
    :init

    (setq projectile-sort-order 'recentf)
    ;; Enable caching for faster project navigation
    (setq projectile-enable-caching t)

    ;; Set the default search path for projects
    (setq projectile-project-search-path '("~/AndroidStudioProjects/" "~/Workspace/"))

    ;; Automatically switch to project directory view
    (setq projectile-switch-project-action #'projectile-dired)
    :config
    ;; Enable Projectile globally
    (projectile-mode +1)

    )


  ;; Keybindings
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

  (my-leader-def
    "p" 'projectile-command-map  ;; Use SPC p for Projectile commands
    "/" 'projectile-ripgrep)     ;; Bind / to projectile-ripgrep under Projectile commands

  ;; Optional: Integrate with Ivy for better completion
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode 1))

#+end_src


* LSP and Programming
** LSP 
#+begin_src emacs-lisp

  ;; LSP Mode Configuration 
  (use-package lsp-mode
    :straight t
    :init
    (setq lsp-keymap-prefix "C-c l")          ;; Keymap prefix for LSP commands
    (setq lsp-completion-provider :capf)      ;; Use native completion-at-point (capf) for completions
    (setq lsp-enable-on-type-formatting t ) ;; Enable on-type formatting
    (setq lsp-enable-indentation t)
    :hook
    ((php-mode dart-mode python-mode js2-mode rjsx-mode elixir-mode web-mode) . lsp-deferred) ;; Enable LSP for specific modes
    :commands lsp lsp-deferred
    :config
    (setq lsp-enable-snippet t)               ;; Enable snippet support
    (setq lsp-enable-file-watchers t)         ;; Enable file watchers for LSP features
    (setq lsp-headerline-breadcrumb-enable t) ;; Enable breadcrumb in headerline
    (setq lsp-format-on-save t)               ;; Enable format on save
    (setq lsp-log-io nil)                     ;; Disable logging by default for better performance
    (setq lsp-idle-delay 0.500)               ;; Set idle delay for completion to 500ms
    (setq lsp-completion-use-capf t)          ;; Use native LSP completions (better with `company-mode`)
    (setq lsp-diagnostics-provider :flycheck) ;; Use Flycheck for diagnostics, improving accuracy
    (setq lsp-diagnostics-max-number 100)     ;; Limit the number of diagnostics shown
    (setq lsp-file-watch-threshold 500)      ;; Limit the number of watched files
    (add-hook 'prog-mode-hook #'lsp)
    (add-hook 'before-save-hook #'lsp-format-buffer)
    )

  ;; Associate .heex and .html.heex files with Elixir mode in LSP
  (with-eval-after-load 'lsp-mode
    (add-to-list 'lsp-language-id-configuration '("\\.heex\\'" . "elixir"))
    (add-to-list 'lsp-language-id-configuration '("\\.html.heex\\'" . "elixir")))


  ;; Optional UI Enhancements for LSP
  (use-package lsp-ui
    :straight t
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-delay 0.5
          lsp-ui-doc-position 'at-point
          lsp-ui-sideline-enable t
          lsp-ui-sideline-show-diagnostics t
          lsp-ui-peek-enable t
          lsp-ui-flycheck-enable t
          lsp-ui-sideline-show-hover t))
#+end_src
** Company
#+begin_src emacs-lisp
    ;; Optional Completion Framework
    (use-package company
      :straight t
      :hook (prog-mode . company-mode)
      :config
      (setq company-minimum-prefix-length 2
            company-idle-delay 0.2
            company-backends '(company-capf))
      (setq company-dabbrev-downcase nil)
      (setq company-show-numbers t)
      (setq company-tooltip-align-annotations t))
#+end_src
** Polymode
#+begin_src emacs-lisp
  ;; Polymode for Elixir Templates with ~H
  (use-package polymode
    :straight t
    :config
    (define-hostmode poly-elixir-hostmode :mode 'elixir-mode)
    (define-innermode poly-liveview-elixir-innermode
      :mode 'web-mode
      :head-matcher (rx line-start (* space) "~H" (= 3 (char "\"'")) line-end)
      :tail-matcher (rx line-start (* space) (= 3 (char "\"'")) line-end)
      :head-mode 'host
      :tail-mode 'host
      :allow-nested nil
      :keep-in-mode 'host
      :fallback-mode 'host)
    (define-polymode poly-elixir-web-mode
      :hostmode 'poly-elixir-hostmode
      :innermodes '(poly-liveview-elixir-innermode)))
#+end_src
** Flycheck
#+begin_src emacs-lisp

  ;; Flycheck for Elixir
  (use-package flycheck
    :straight t
    :hook (elixir-mode . flycheck-mode)
    :config
    (setq flycheck-checker 'elixir-credo
          flycheck-indication-mode 'right-fringe
          flycheck-highlighting-mode 'symbols))

  ;; Optional Syntax Checking with Flycheck
  (use-package flycheck
    :straight t
    :hook (prog-mode . flycheck-mode)
    :config
    (setq flycheck-indication-mode 'right-fringe
          flycheck-highlighting-mode 'symbols
          flycheck-check-syntax-automatically '(mode-enabled save)
          flycheck-display-errors-delay 0.3))
#+end_src
** Prettier 
#+begin_src emacs-lisp
(use-package prettier
  :ensure t
  :hook ((js2-mode . prettier-mode)
         (rjsx-mode . prettier-mode)))

#+end_src
** Web mode 
#+begin_src emacs-lisp

  ;; Ensure web-mode is installed
  (use-package web-mode
    :straight t
    :mode ("\\.html\\'" "\\.css\\'" "\\.js\\'" "\\.heex\\'")
    :hook
    ((web-mode . lsp-deferred) ;; Enable LSP for web-mode
     (web-mode . emmet-mode)  ;; Enable Emmet mode
     (web-mode . (lambda ()
                   ;; Format on save
                   (add-hook 'before-save-hook #'lsp-format-buffer nil t))))
    :config
    ;; Configure web-mode indentation and settings
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-enable-auto-quoting nil ;; Disable automatic insertion of quotes
          web-mode-enable-auto-pairing t  ;; Enable auto pairing of tags
          web-mode-enable-current-column-highlight t
          web-mode-enable-current-element-highlight t)

    ;; Add prettify-symbols for web-mode
    (add-hook 'web-mode-hook
              (lambda ()
                (push '(">=" . ?\u2265) prettify-symbols-alist)
                (push '("<=" . ?\u2264) prettify-symbols-alist)
                (push '("!=" . ?\u2260) prettify-symbols-alist)
                (push '("==" . ?\u2A75) prettify-symbols-alist)
                (push '("->" . ?\u2192) prettify-symbols-alist)
                (prettify-symbols-mode 1))))

  ;; Install and configure emmet-mode
  (use-package emmet-mode
    :straight t
    :hook ((web-mode css-mode sgml-mode) . emmet-mode) ;; Enable Emmet in web-mode, css-mode, and sgml-mode
    :config
    ;; Optional: Keybindings for Emmet
    (define-key emmet-mode-keymap (kbd "TAB") 'emmet-expand-line) ;; Bind TAB key to expand Emmet abbreviation
    (setq emmet-expand-jsx-className? t) ;; Use `className` instead of `class` for JSX
    (setq emmet-indent-after-expansion nil)) ;; Optional: Disable extra indentation after expansion
#+end_src
** Python
#+begin_src emacs-lisp
  ;; Python Language Configuration

  (when (featurep 'lsp-config)
    (straight-use-package 'python-mode)
    (require 'python-mode)

    ;; Setup LSP for Python
    (add-hook 'python-mode-hook #'lsp)

    ;; Format on save
    (add-hook 'python-mode-hook
              (lambda ()
                (add-hook 'before-save-hook 'lsp-format-buffer nil t))))

#+end_src
** Elixir
#+begin_src emacs-lisp

  ;; Elixir Mode Configuration for LSP and Phoenix LiveView
  (use-package elixir-mode
    :straight t
    :mode ("\\.ex\\'" "\\.exs\\'" "\\.html\\.heex\\'" "\\.heex\\'")
    :hook
    ((elixir-mode . lsp-deferred)  ;; Enable LSP for Elixir
     (elixir-mode . emmet-mode)   ;; Enable Emmet mode
     (elixir-mode . (lambda ()    ;; Prettify symbols
                      (setq prettify-symbols-alist
                            '((">=" . ?\u2265) ("<=" . ?\u2264)
                              ("!=" . ?\u2260) ("==" . ?\u2A75)
                              ("=~" . ?\u2245) ("<-" . ?\u2190)
                              ("->" . ?\u2192) ("|>" . ?\u25B7)))
                      (prettify-symbols-mode 1))))
    :config
    ;; Register .heex files as Elixir for LSP
    (with-eval-after-load 'lsp-mode
      (add-to-list 'lsp-language-id-configuration '(elixir-mode . "elixir"))
      (add-to-list 'lsp-language-id-configuration '(web-mode . "html"))))

  (use-package mix
    :after elixir-mode)
#+end_src

** Dart
#+begin_src emacs-lisp

  ;; Dart Language Configuration
  (use-package dart-mode
    :straight t
    :hook ((dart-mode . lsp)            ;; Enable LSP in Dart files
           (dart-mode . (lambda ()      ;; Format on save
                          (add-hook 'before-save-hook #'lsp-format-buffer nil t))))
    :config
    (setq dart-format-on-save t))       ;; Optional, ensures format-on-save behavior

  ;; LSP-Dart for Dart/Flutter development
  (use-package lsp-dart
    :straight t
    :after dart-mode
    :config
    ;; Set Flutter SDK path
    (setq lsp-dart-flutter-sdk-dir "~/development/flutter")

    ;; Optional: Enable hot reload on save
    (setq lsp-dart-dap-flutter-hot-reload-on-save t))

  ;; Debugging with DAP Mode (Optional)
  (use-package dap-mode
    :straight t
    :after (lsp-mode)
    :config
    (dap-register-debug-template
     "Flutter :: Debug"
     (list :type "flutter"
           :request "launch"
           :flutterMode "debug"
           :program (expand-file-name "lib/main.dart" (projectile-project-root)))))
#+end_src

** JS
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :hook ((js2-mode . lsp)  ;; Enable lsp for JavaScript and JSX files
           (js2-mode . subword-mode)) ;; Enables movement between camelCase words
    :mode ("\\.js\\'" "\\.jsx\\'" "\\.ts\\'" "\\.tsx\\'")) ;; React/JSX file extensions

  (use-package rjsx-mode
  :ensure t
  :mode ("\\.jsx\\'" "\\.tsx\\'")
  :config
  (setq js2-basic-offset 2) ;; ReactJS style
  (add-hook 'rjsx-mode-hook (lambda () (setq js2-mode-show-strict-warnings nil)))) ;; Disable unnecessary warnings


#+end_src

** PHP
#+begin_src emacs-lisp
(use-package php-mode
  :ensure t
  :hook (php-mode . lsp) ;; Use LSP for PHP if you want advanced features like completion, diagnostics
  :config
  (setq php-mode-coding-style 'psr2) ;; PSR-2 coding standards
  (add-hook 'php-mode-hook (lambda () (setq tab-width 4)))) ;; Set tab width for PHP
#+end_src

** PO
#+begin_src emacs-lisp
(use-package po-mode
  :ensure t
  :mode ("\\.po\\'" "\\.pot\\'")
  :hook (po-mode . flyspell-mode) ; Enable spell checking in po-mode
  :config
  (setq po-auto-edit-mode t          ; Automatically enable editing mode
        po-developer-mode t))        ; Enable developer mode for additional features

#+end_src
* Rest 

#+begin_src emacs-lisp


    ;; Enable LSP logging (optional for debugging)
    (setq lsp-log-io nil)

    (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install)
      (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
            TeX-source-correlate-start-server t)
      (add-hook 'TeX-after-compilation-finished-functions
                #'TeX-revert-document-buffer))
    (setq TeX-source-correlate-mode t
          TeX-source-correlate-start-server t)

    (straight-use-package 'which-key)
    (use-package which-key
      :ensure t
      :config
      (which-key-mode)
      (setq which-key-idle-delay 0.3))

    (straight-use-package 'hydra)
    (use-package hydra
      :ensure t
      :config
      ;; Example hydra for window management
      (defhydra hydra-window (:color pink :hint nil)
        "
      Movement: [_h_] left  [_j_] down  [_k_] up  [_l_] right   Actions: [_v_] split [_x_] delete [_o_] maximize [_b_] balance [_q_] quit
      "
        ("h" windmove-left)
        ("j" windmove-down)
        ("k" windmove-up)
        ("l" windmove-right)
        ("v" split-window-right)
        ("x" delete-window)
        ("o" delete-other-windows)
        ("b" balance-windows)
        ("q" nil)))


    (straight-use-package 'ivy)
    (straight-use-package 'counsel)
    (straight-use-package 'swiper)

    (use-package ivy
      :ensure t
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t
            ivy-count-format "(%d/%d) "))
    (use-package counsel
      :after ivy
      :config
      (counsel-mode 1))
    (use-package swiper
      :after ivy
      :bind ("C-s" . swiper))

    (straight-use-package 'magit)
    (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
    (my-leader-def
      "g g" 'magit-status)  ;; Use SPC g for Magit status

    (straight-use-package 'yasnippet)
    (use-package yasnippet
      :ensure t
  :hook ((php-mode . yas-minor-mode)
           (js2-mode . yas-minor-mode)
           (rjsx-mode . yas-minor-mode))
      :config
      (yas-global-mode 1))

    (straight-use-package 'flycheck)
    (use-package flycheck
      :ensure t
      :init (global-flycheck-mode))

    (straight-use-package 'editorconfig)
    (use-package editorconfig
      :ensure t
      :config
      (editorconfig-mode 1))

    ;; Non-keybindings general settings
    (use-package emacs
      :config
      (setq display-line-numbers-type 't) ;; or 'relative
      (global-display-line-numbers-mode 1)
      (global-visual-line-mode 1)

      ;; Disable in specific modes
      (dolist (mode '(org-mode-hook
                      eshell-mode-hook
                      term-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0)))))

    (setq select-enable-clipboard t)
    (setq select-enable-primary t)


    (straight-use-package 'treemacs)
    (straight-use-package 'treemacs-projectile)

    (use-package treemacs
      :ensure t
      :bind ("C-x t" . treemacs))

    (straight-use-package 'dashboard)
    (use-package dashboard
      :ensure t
      :config
      (setq dashboard-startup-banner 'official
            dashboard-center-content t
            dashboard-items '((recents . 5)
                              (projects . 5)))
      (dashboard-setup-startup-hook))

    (straight-use-package 'evil-mc)
    (use-package evil-mc
      :ensure t
      :config
      ;; Enable evil-mc globally
      (global-evil-mc-mode 1)
      )

    (straight-use-package 'expand-region)
    (use-package expand-region
      :ensure t
      :bind ("C-=" . er/expand-region))

    (straight-use-package 'smartparens)
    (use-package smartparens
      :ensure t
      :config
      (smartparens-global-mode t))

    (use-package undo-tree
      :straight t
      :init
      ;; Set the directory for storing undo history files.
      (setq undo-tree-history-directory-alist
            '(("." . "~/.config/emacs/tmp/undo-tree")))

      ;; Enable auto-saving of undo history for all buffers.
      (setq undo-tree-auto-save-history t)

      ;; Show timestamps and diffs in the undo tree visualizer.
      (setq undo-tree-visualizer-timestamps t
            undo-tree-visualizer-diff t)

      ;; Limit undo history size for performance (optional).
      (setq undo-tree-history-limit 500
            undo-tree-strong-limit 1000
            undo-tree-outer-limit 1000000)

      :config
      ;; Enable global undo tree mode.
      (global-undo-tree-mode 1)

      ;; Set a custom keybinding for undo tree visualization.
      (global-set-key (kbd "C-x u") 'undo-tree-visualize)

      ;; Customize the visualizer mode for ease of use.
      (add-hook 'undo-tree-visualizer-mode-hook
                (lambda ()
                  (define-key undo-tree-visualizer-mode-map (kbd "q") 'quit-window))))


    ;; config/autocompletion/company.el

    (straight-use-package 'company)
    (require 'company)

    ;; Enable company mode globally
    (add-hook 'after-init-hook 'global-company-mode)

    ;; Set some custom company options
    (setq company-idle-delay 0.2)  ;; Time before suggestions pop up
    (setq company-minimum-prefix-length 2)  ;; Start suggesting after typing 2 characters

    ;; Enable company-mode in specific major modes, such as programming languages
    (add-hook 'prog-mode-hook 'company-mode)  ;; Enable in programming modes
#+end_src
